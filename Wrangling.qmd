---
title: "STAT 231 Blog Project Wrangling"
author: "Ethan Van De Water, Maximo Gonzalez, Alex Nichols"
date: "2023-11-27"
format: pdf
---

```{r}
#| label: setup
#| include: FALSE

# set code chunk option defaults
knitr::opts_chunk$set(
  # display code as types
  tidy = FALSE, 
  # slightly smaller code font
  size = "small",
  # set default figure width and height
  fig.width = 5, fig.height = 3) 

# improve digit and NA display 
options(scipen = 1, knitr.kable.NA = '')

# load packages
library(tidytext)
library(wordcloud)
library(textdata)
library(tidyverse)
library(rvest)
library(httr)
library(stringr)
```

```{r}
##############################.txt files##########################################

#series of articles relating to finance and the israel gaza conflict. Interesting to see what a text analysis produces from this. 

file_path <- "data/JamieDimonCNBCInterview.txt"

# Read the text file into a data frame with one column named "Paragraph"
JamieDimonCNBCInterview <- read_lines(file_path) %>%
  tibble(Paragraph = .)

# Separate each paragraph into words and unnest the data frame
JamieDimonCNBCInterview <- JamieDimonCNBCInterview %>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path2 <- "data/JpowellSemiAnnualAddress.txt"

JPowellSemiAnnualAddress <- read_lines(file_path2) %>%
  tibble(Paragraph = .)

JPowellSemiAnnualAddress <- JPowellSemiAnnualAddress %>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path3 <- "data/MichaelBarrTreasuryMarket.txt"

MichaelBarrTreasury <- read_lines(file_path3) %>%
  tibble(Paragraph = .)

MichaelBarrTreasury <- MichaelBarrTreasury%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path4 <- "data/BloombergWarArticle.txt"

BloombergArticle <- read_lines(file_path4) %>%
  tibble(Paragraph = .)

BloombergArticle <- BloombergArticle%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path5 <- "data/BrookingsArticle.txt"

BrookingsArticle <- read_lines(file_path5) %>%
  tibble(Paragraph = .)

BrookingsArticle <- BrookingsArticle%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path6 <- "data/DODArticle.txt"

DODArticle <- read_lines(file_path6) %>%
  tibble(Paragraph = .)

DODArticle <- DODArticle%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path7 <- "data/CnnArticle.txt"

CnnArticle <- read_lines(file_path7) %>%
  tibble(Paragraph = .)

CnnArticle <- CnnArticle%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path8 <- "data/JPMarticle2.txt"

JPMarticle2 <- read_lines(file_path8) %>%
  tibble(Paragraph = .)

JPMarticle2 <- JPMarticle2%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path9 <- "data/NYTArticle.txt"

NYTArticle <- read_lines(file_path9) %>%
  tibble(Paragraph = .)

NYTArticle <- NYTArticle%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)

file_path10 <- "data/GoldmanArticle.txt"

GoldmanArticle <- read_lines(file_path10) %>%
  tibble(Paragraph = .)

GoldmanArticle <- GoldmanArticle%>%
  mutate(Word = str_split(Paragraph, "\\s+")) %>%
  unnest(Word) %>%
  select(Word)


##############################Webscrape########################################## really doesn't work well at all

# GoldmanSachsArticle <- "https://www.cnbc.com/2023/11/03/goldman-says-israel-hamas-war-could-majorly-impact-europes-economy.html"
# 
# robotstxt::paths_allowed(GoldmanSachsArticle)
# 
# htmloutput <- httr::GET(GoldmanSachsArticle)#gets the html content
# 
# html_content <- read_html(content(htmloutput, as = "text"))#returns the html content as text
# 
# article_text <- html_content %>%
#   html_nodes(".ArticleBody-articleBody p") %>%  # gets the paragraphs from inside the article
#   html_text() %>%
#   str_trim() #gets rid of excess white space
# 
# cat(article_text, sep = "\n")#prints the text (for testing purposes)
# 
# GoldmanSachsArticle_df <- tibble(Text = article_text)
# 
# GoldmanSachsArticle_word_df <- tibble(Word = str_split(article_text, "\\s+")|> unlist() )


# BloombergArticle <- "https://www.bloomberg.com/news/features/2023-10-12/israel-hamas-war-impact-could-tip-global-economy-into-recession#xj4y7vzkg"
# 
# robotstxt::paths_allowed(BloombergArticle)
# 
# Bloomberghtmloutput <- httr::GET(BloombergArticle)#gets the html content
# 
# Bloomberghtml_content <- read_html(content(Bloomberghtmloutput, as = "text"))#returns the html content as text
# 
# article_text <- Bloomberghtml_content %>%
#   html_nodes("p") %>%  # gets the paragraphs from inside the article
#   html_text() %>%
#   str_trim() #gets rid of excess white space
# 
# cat(article_text, sep = "\n")#prints the text (for testing purposes)
# 
# Bloomberg_df <- tibble(Text = article_text)
# 
# Bloomberg_word_df <- tibble(Word = str_split(article_text, "\\s+") |> unlist()) #had issues webscraping, just put into a .txt file. 

# BrookingsArticle <- "https://www.brookings.edu/articles/the-israel-and-gaza-war-economic-repercussions/"
# 
# robotstxt::paths_allowed(BrookingsArticle)
# 
# response1 <- httr::GET(url)
# 
# # Parse the HTML content
# html_content1 <- read_html(content(response1, as = "text"))
# 
# # Extract the text from the article
# article_text1 <- html_content1 %>%
#   html_nodes("div.post-content p") %>%
#   html_text() %>%
#   str_trim()
# 
# cat(article_text1, sep = "\n")#prints the text (for testing purposes)
# 
# BrookingsArticle_df <- tibble(Text = article_text1)
# 
# BrookingsArticle_word_df <- tibble(Word = str_split(article_text1, "\\s+") |> unlist())


 data(stop_words)

combined_df <- rbind(JamieDimonCNBCInterview, JPowellSemiAnnualAddress, MichaelBarrTreasury,
                     BloombertArticle, BrookingsArticle, DODArticle, CnnArticle, JPMarticle2, GoldmanArticle)|>
  mutate(Word = tolower(Word)) |>#makes everything lowercase
  rename(word = Word)|>
  mutate(word = str_replace_all(word, "[^a-z'-]", "")) #makes it so there's no punctuation included in the dataframe       aside from ', -. 
  
words_to_remove <- c("leslie", "picker", "kelly","jamie", "dimon", "portant", "dont", "lot", "im", "stuff") #gets rid of other random words we don't want included

for (wordReplace in words_to_remove) {#uses loop to check if words in combined df are a match from words_to_remove, replaces them with blank strings if they are
  combined_df <- combined_df %>%
    mutate(word = str_replace_all(word, wordReplace, ""))
}

combined_df<- combined_df |>
    filter(nchar(word)>0) |>#removes the blank strings
    anti_join(stop_words, by="word") #removes stop words


word_counts <- combined_df |> #creates the counts, orders by descending
  group_by(word) |>
  summarize(count = n()) |>
  group_by(count) |>
  arrange(desc(count))
```




Sources: (Add as needed)

https://www.cnbc.com/2023/11/03/goldman-says-israel-hamas-war-could-majorly-impact-europes-economy.html

https://www.cnbc.com/2023/08/02/cnbc-exclusive-cnbc-transcript-jpmorgan-chase-chairman-ceo-jamie-dimon-speaks-with-cnbcs-leslie-picker-on-power-lunch-today.html

https://www.federalreserve.gov/newsevents/testimony/powell20230621a.htm

https://www.federalreserve.gov/newsevents/speech/barr20231116a.htm

https://www.brookings.edu/articles/the-israel-and-gaza-war-economic-repercussions/

https://www.bloomberg.com/news/features/2023-11-28/evergrande-under-pressure-in-hong-kong-court-to-repay-creditors

https://www.defense.gov/News/News-Stories/Article/Article/3578196/defense-department-continues-to-stress-law-of-war-with-israel/

https://www.cnn.com/2023/10/15/economy/stocks-week-ahead-deglobalization/index.html


```{r}
##############################Visuals############################################

#could make this one interactive so that you can select the number of words that get shown. Code is reproducible so we can add as many of the little articles that we want. 
Visual1Data <- word_counts |>
  filter(count>27)

ggplot(data = Visual1Data, aes(x = fct_reorder(word, count), y = count, fill = count)) +
  geom_col() +
  coord_flip() +
  scale_fill_viridis_c() +
  guides(fill = "none") +
  labs(
    x = NULL,
    y = "Number of instances",
    title = "The most common words in the articles")

```



